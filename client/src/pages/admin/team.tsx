import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { ArrowLeft, Users, Plus, Edit, User, Loader2, Trash2 } from "lucide-react";
import { Link } from "wouter";
import { EditModal } from "@/components/EditModal";
import { useToast } from "@/hooks/use-toast";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import type { TeamMember } from "@shared/schema";

export default function AdminTeam() {
  const [editModalOpen, setEditModalOpen] = useState(false);
  const [selectedMember, setSelectedMember] = useState<TeamMember | null>(null);
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Fetch team members from API
  const { data: teamMembers = [], isLoading, error } = useQuery<TeamMember[]>({
    queryKey: ['/api/admin/team'],
  });

  // Update team member mutation
  const updateMutation = useMutation({
    mutationFn: async (data: { id: string; [key: string]: any }) => {
      const isNewMember = !data.id || data.id === '';
      const url = isNewMember ? '/api/admin/team' : `/api/admin/team/${data.id}`;
      const method = isNewMember ? 'POST' : 'PUT';
      
      return apiRequest(url, {
        method,
        body: JSON.stringify(data),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('adminToken')}`,
        },
      });
    },
    onSuccess: (_, variables) => {
      const isNewMember = !variables.id || variables.id === '';
      toast({
        title: "Başarılı",
        description: isNewMember ? "Yeni takım üyesi eklendi." : "Takım üyesi bilgileri güncellendi.",
      });
      queryClient.invalidateQueries({ queryKey: ['/api/admin/team'] });
      queryClient.invalidateQueries({ queryKey: ['/api/team'] });
      setEditModalOpen(false);
    },
    onError: (error) => {
      toast({
        title: "Hata",
        description: error instanceof Error ? error.message : "İşlem sırasında bir hata oluştu.",
        variant: "destructive",
      });
    }
  });

  const handleEdit = (member: TeamMember) => {
    setSelectedMember(member);
    setEditModalOpen(true);
  };

  const handleSave = async (data: any) => {
    updateMutation.mutate(data);
  };

  // Delete team member mutation
  const deleteMutation = useMutation({
    mutationFn: async (id: string) => {
      return apiRequest(`/api/admin/team/${id}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('adminToken')}`,
        },
      });
    },
    onSuccess: () => {
      toast({
        title: "Başarılı",
        description: "Takım üyesi silindi.",
      });
      queryClient.invalidateQueries({ queryKey: ['/api/admin/team'] });
      queryClient.invalidateQueries({ queryKey: ['/api/team'] });
    },
    onError: (error) => {
      toast({
        title: "Hata",
        description: error instanceof Error ? error.message : "Silme sırasında bir hata oluştu.",
        variant: "destructive",
      });
    }
  });

  const handleAddNew = () => {
    const newMember = {
      id: '', // Will be generated by server
      name: '',
      position: '',
      positionEn: '',
      email: '',
      department: '',
      displayOrder: teamMembers.length + 1,
      isActive: true
    };
    setSelectedMember(newMember);
    setEditModalOpen(true);
  };

  const handleDelete = (member: TeamMember) => {
    if (confirm(`${member.name} adlı takım üyesini silmek istediğinizden emin misiniz?`)) {
      deleteMutation.mutate(member.id);
    }
  };

  const editFields = [
    { key: 'name', label: 'Ad Soyad', type: 'text' as const, required: true },
    { key: 'position', label: 'Pozisyon (Türkçe)', type: 'text' as const, required: true },
    { key: 'positionEn', label: 'Pozisyon (İngilizce)', type: 'text' as const },
    { key: 'email', label: 'E-posta', type: 'email' as const },
    { key: 'department', label: 'Departman', type: 'text' as const },
    { key: 'displayOrder', label: 'Sıralama', type: 'number' as const },
  ];

  if (isLoading) {
    return (
      <div className="p-6 flex items-center justify-center">
        <Loader2 className="h-8 w-8 animate-spin" />
        <span className="ml-2">Takım üyeleri yükleniyor...</span>
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-6">
        <div className="text-center text-red-600">
          Takım üyeleri yüklenirken hata oluştu. Lütfen tekrar deneyin.
        </div>
      </div>
    );
  }

  return (
    <div className="p-6">
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-4">
          <Button variant="outline" size="sm" asChild>
            <Link href="/admin/dashboard">
              <ArrowLeft className="h-4 w-4 mr-2" />
              Geri Dön
            </Link>
          </Button>
          <h1 className="text-3xl font-bold">Takım Üyeleri</h1>
        </div>
        <div className="flex items-center space-x-2">
          <Badge variant="secondary">
            {teamMembers.length} Üye
          </Badge>
          <Button onClick={handleAddNew}>
            <Plus className="h-4 w-4 mr-2" />
            Yeni Üye
          </Button>
        </div>
      </div>

      <div className="space-y-4">
        {teamMembers.length === 0 ? (
          <Card>
            <CardContent className="text-center py-8">
              <Users className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <p className="text-gray-500 mb-4">Henüz hiç takım üyesi yok.</p>
              <Button onClick={handleAddNew}>
                <Plus className="h-4 w-4 mr-2" />
                İlk Üyeyi Ekle
              </Button>
            </CardContent>
          </Card>
        ) : (
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
            {teamMembers.map((member) => (
              <Card key={member.id}>
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div className="space-y-1">
                      <CardTitle className="flex items-center space-x-2">
                        <User className="h-4 w-4" />
                        <span>{member.name}</span>
                      </CardTitle>
                      <CardDescription>
                        <div className="space-y-1">
                          <div>{member.position}</div>
                          <div className="text-xs text-gray-400">{member.positionEn}</div>
                        </div>
                      </CardDescription>
                    </div>
                    <div className="flex space-x-2">
                      <Button variant="outline" size="sm" onClick={() => handleEdit(member)}>
                        <Edit className="h-3 w-3 mr-1" />
                        Düzenle
                      </Button>
                      <Button 
                        variant="outline" 
                        size="sm" 
                        onClick={() => handleDelete(member)}
                        disabled={deleteMutation.isPending}
                        className="text-red-600 hover:text-red-700"
                      >
                        {deleteMutation.isPending ? (
                          <Loader2 className="h-3 w-3 mr-1 animate-spin" />
                        ) : (
                          <Trash2 className="h-3 w-3 mr-1" />
                        )}
                        Sil
                      </Button>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    <div className="bg-gray-50 p-3 rounded-lg">
                      <p className="text-sm font-medium text-gray-700">E-posta</p>
                      <p className="text-sm text-gray-600">{member.email}</p>
                    </div>
                    {!member.image && (
                      <div className="bg-amber-50 p-3 rounded-lg">
                        <p className="text-sm text-amber-700">Profil fotoğrafı yok</p>
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </div>

      {selectedMember && (
        <EditModal
          isOpen={editModalOpen}
          onClose={() => setEditModalOpen(false)}
          title={selectedMember.id ? `${selectedMember.name} - Düzenle` : "Yeni Takım Üyesi Ekle"}
          data={selectedMember}
          onSave={handleSave}
          fields={editFields}
        />
      )}
    </div>
  );
}